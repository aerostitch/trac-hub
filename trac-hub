#!/usr/bin/env ruby

require 'json'
require 'logger'
require 'octokit'
require 'optparse'
require 'sequel'
require 'yaml'

class Migrator
  def initialize(trac, github, users, labels)
    @trac = trac
    @gh = github
    # Only collaborators are viable assignees.
    collaborators = @gh.collaborators.map { |c| c[:login] }
    @users = Hash[users.select { |from,to| collaborators.include?(to) }]
    @labels = Hash[labels.map { |topic, rx| [topic, rx.map { |f, t| [Regexp.new(f), t] }] }]
    @milestones = Hash[@gh.list_milestones.map { |m| [m[:title], m[:number]] }]
    @issues = Hash[@gh.list_issues.map { |i| [i[:title], i] }]
    @ticket_to_issue = {}
  end

  def migrate(start_ticket = 0)
    migrate_milestones
    migrate_tickets(start_ticket)
  end

  private

  def migrate_milestones
    $logger.info('migrating milestones')
    @trac.milestones.each do |milestone|
      name = milestone[:name]
      if @milestones.has_key?(name)
        $logger.warn("skipping already existing milestone '#{name}'")
        next
      end
      opts = {}
      opts[:state] = milestone[:completed] == 0 ? 'open' : 'closed'
      opts[:description] = milestone[:description]
      begin
        t = DateTime.parse(milestone[:due])
        opts[:due_on] = t.to_time
      rescue
        $logger.warn("ignoring milestone date '#{milestone[:due]}'")
      end
      $logger.info("creating new milestone #{name}")
      ms = @gh.create_milestone(name, opts)
      @milestones[name] = ms[:number]
    end
  end

  # Creates github issues for trac tickets.
  def migrate_tickets(start_ticket)
    $logger.info('migrating issues')
    # We match the issue title to determine whether an issue exists already.
    total_tickets = @trac.tickets.count
    @trac.tickets.order(:id).where{id >= start_ticket}.all.each do |ticket|
      total_tickets -= 1
      rate_check(100) if total_tickets % 100 == 0
      title = ticket[:summary]
      if @issues.has_key?(title)
        $logger.warn("skipping existing issue '#{title}'")
        next
      end
      begin
        opts = {}
        assignee = translate_username(ticket[:owner])
        opts[:assignee] = assignee if assignee
        milestone = @milestones[ticket[:milestone]]
        opts[:milestone] = milestone if milestone
        body = markdownify(ticket[:description])
        prepend_author(ticket[:reporter], body)
        issue = @gh.create_issue(title, body, opts)
        @issues[title] = issue
        # FIXME: Perhaps this label checking is redundant and only makes sense
        # during replaying of the changes later, but my Trac fu is not enough to
        # make that call.
        [:type, :component, :priority, :version, :resolution].each do |category|
          if labs = translate_labels(issue, category, ticket[category])
            $logger.debug("issue #{issue[:number]}: adding labels '#{labs}'")
            @gh.update_issue_opts(issue, :labels => labs)
          end
        end
        $logger.debug('replaying ticket history')
        @trac.changes.where(:ticket => ticket[:id]).each do |chg|
          replay_history(issue, chg[:author], chg[:field], chg[:newvalue])
        end
        $logger.info("migrated ticket #{ticket[:id]} to issue ##{issue[:number]}")
      rescue Interrupt
        $logger.error("cancelled migration of ticket #{ticket[:id]} '#{title}'")
        exit 1
      end
    end
  end

  # Replays the ticket history of a given ticket.
  def replay_history(issue, author, category, value)
    i = issue[:number]
    case category
    when 'milestone'
      ms = @milestones[value]
      $logger.debug("issue #{i}: updating milestone to '#{ms}'")
      @gh.update_issue_opts(issue, :milestone => ms)
    when 'owner'
      if user = translate_username(value)
        $logger.debug("issue #{i}: updating assignee to '#{user}'")
        @gh.update_issue_opts(issue, :assignee => user)
      end
    when 'status'
      case value
      when 'closed'
        $logger.debug("issue #{i}: closing")
        @gh.close_issue(i)
      when 'reopened'
        $logger.debug("issue #{i}: reopening")
        @gh.reopen_issue(i)
      end
    when 'summary'
      $logger.debug("issue #{i}: updating title to '#{value}'")
      @gh.update_issue(i, value, issue[:body])
    when 'description'
      $logger.debug("issue #{i}: updating body")
      reporter = issue.body.split("\n\n", 1)[0]
      body = [reporter, value].join("\n\n")
      @gh.update_issue(i, issue[:title], body)
    when 'comment'
      return if value.empty? || value =~ /Milestone.*deleted/
      max_len = 30
      excerpt = value[0, max_len].gsub(/\n|\r/, ' ')
      excerpt << '...' if value.size > max_len
      $logger.debug("issue #{i}: adding comment '#{excerpt}'")
      @gh.add_comment(i, prepend_author(author, markdownify(value)))
    when /resolution|priority|component|type|version/
      labels = translate_labels(issue, category, value)
      @gh.update_issue_opts(issue, :labels => labels)
    when /keywords|cc|reporter/
      # TODO
    end
  end

  def prepend_author(author, content)
    content.insert(0, "**Original reporter**: *#{author}*\n\n")
  end

  def rate_check(bound, seconds=30)
    limit, remaining = @gh.rate_limit
    $logger.debug("#{remaining}/#{limit} operations available")
    while remaining < bound
      $logger.info("less than #{bound} operations viable, sleeping...")
      sleep(seconds)
    end
  end

  def translate_username(user)
    @users[user]
  end

  # Adds one given label from a predefined category and removes all other
  # labels from that category.
  def translate_labels(issue, category, label)
    i = issue[:number]
    old_labs = issue[:labels].map { |l| l[:name] }
    return nil unless @labels.has_key?(category)
    t, f = @labels[category].partition { |pat, rep| pat =~ label }
    if t.empty?
      $logger.warn("issue #{i}: no match for label '#{label}' in '#{category}'")
      return nil
    elsif t.size > 1
      $logger.error("issue #{i}: more than one match for '#{label}' in '#{category}'")
      exit 1
    end
    new_labs = old_labs.reject { |lab| f.find { |pat, rep|  pat =~ lab } }
    if old_labs.size != new_labs.size
      $logger.debug("issue #{i}: removed existing labels in '#{category}'")
    end
    new_label = t[0][1]
    $logger.debug("issue #{i}: adding label '#{new_label}'")
    new_labs << new_label
  end

  def markdownify(str)
    # Code
    str.gsub!(/\{\{\{([^\n]+?)\}\}\}/, '`\1`')
    str.gsub!(/\{\{\{(.+?)\}\}\}/m, '```\1```')
    # Headings
    str.gsub!(/\=\=\=\=\s(.+?)\s\=\=\=\=/, '#### \1')
    str.gsub!(/\=\=\=\s(.+?)\s\=\=\=/, '### \1')
    str.gsub!(/\=\=\s(.+?)\s\=\=/, '## \1')
    str.gsub!(/\=\s(.+?)\s\=[\s\n]*/, '# \1')
    # Links
    str.gsub!(/\[(http[^\s\[\]]+)\s([^\[\]]+)\]/, '[\2](\1)')
    str.gsub!(/\!(([A-Z][a-z0-9]+){2,})/, '\1')
    # Font styles
    str.gsub!(/'''(.+?)'''/, '**\1**')
    str.gsub!(/''(.+?)''/, '*\1*')
    # Lists
    str.gsub!(/(^\s+)\*/, '\1-')
    str.gsub!(/(^\s+)(\d)\./, '\1\2.')
    str
  end
end

class Trac
  attr_reader :milestones, :tickets, :changes
  def initialize(db)
    $logger.info('loading milestones and tickets')
    @db = db
    @milestones = @db[:milestone]
    @tickets = @db[:ticket]
    @changes = @db[:ticket_change]
  end
end

class GitHub
  def initialize(user, pass, repo)
    $logger.debug("connecting to github at repo '#{repo}'")
    @client = Octokit::Client.new(:login => user, :password => pass)
    @repo = repo
  end

  def collaborators
    @client.collaborators(@repo)
  end

  def list_milestones
    open = @client.list_milestones(@repo, :state => 'open')
    closed = @client.list_milestones(@repo, :state => 'closed')
    open + closed
  end

  def create_milestone(*args)
    @client.create_milestone(@repo, *args)
  end

  def list_issues
    $logger.debug('fetching all open issues')
    open = fetch_pagewise { |i| @client.list_issues(@repo, :page => i) }
    closed = fetch_pagewise do |i|
      @client.list_issues(@repo, {:state => 'closed', :page => i})
    end
    open + closed
  end

  def create_issue(*args)
    $logger.debug("creating issue '#{args[0]}'")
    if args[1].size > 2**16
      msg = "\n\n*(issue truncated due to size)*"
      $logger.warn("truncating issue '#{args[0]}' (#{args[1].size} bytes)")
      args[1] = args[1][0, 65300] + msg
    end
    @client.create_issue(@repo, *args)
  end

  def update_issue(*args)
    @client.update_issue(@repo, *args)
  end

  def close_issue(*args)
    @client.close_issue(@repo, *args)
  end

  def reopen_issue(*args)
    @client.reopen_issue(@repo, *args)
  end

  def add_comment(*args)
    @client.add_comment(@repo, *args)
  end

  def update_issue_opts(issue, opts)
    update_issue(issue[:number], issue[:title], issue[:body], opts)
  end

  def rate_limit
    [@client.rate_limit, @client.rate_limit_remaining]
  end

  private

  def fetch_pagewise
    result = []
    begin
      i = 1;
      loop do
        $logger.debug("fetching page #{i}")
        page = yield i
        break if page.empty?
        result += page
        i += 1
      end
    end
    $logger.debug("fetched #{result.size} elements")
    result
  end
end

class Options < Hash
  def initialize(argv)
    super()
    opts = OptionParser.new do |opts|
      opts.banner = "#{$0}, available options:"
      opts.on('-c config', '--config', 'set the configuration file') do |c|
        self[:config] = c
      end
      opts.on_tail('-h', '--help', 'display this help and exit') do |help|
        puts(opts)
        exit
      end
      opts.on('-s', '--start-at ID', 'be verbose') do |id|
        self[:start] = id
      end
      opts.on('-v', '--verbose', 'be verbose') do |v|
        self[:verbose] = v
      end
      begin
        opts.parse!(argv)
        if not self[:config]
          default = File.join(File.dirname(__FILE__), 'config.yaml')
          raise 'missing configuration file' unless File.exists?(default)
          self[:config] = default
        end
        self[:start] = 0 unless self[:start]
      rescue => e
        STDERR.puts(e)
        STDERR.puts('run with -h to see available options')
        exit 1
      end
    end
  end
end

if __FILE__ == $0
  opts = Options.new(ARGV)
  cfg = YAML.load_file(opts[:config])

  # Setup logger.
  $logger = Logger.new(STDERR)
  $logger.level = opts[:verbose] ? Logger::DEBUG : Logger::INFO
  $logger.formatter = proc do |severity, datetime, progname, msg|
    time = datetime.strftime('%Y-%m-%d %H:%M:%S')
    "[#{time}] #{severity}#{' ' * (5 - severity.size + 1)}| #{msg}\n"
  end

  # Setup database.
  db = nil
  if sqlite = cfg['trac']['sqlite']
    file = sqlite['file']
    if not File.exists?(file)
      $logger.error("no such file: #{file}")
      exit 1
    end
    $logger.debug("connecting to SQLite databse '#{file}'")
    db = Sequel.sqlite(file)
  end
  if not db
    $logger.error('could not connect to trac databse')
    exit 1
  end

  trac = Trac.new(db)
  gh = cfg['github']
  github = GitHub.new(gh['user'], gh['pass'], gh['repo'])
  migrator = Migrator.new(trac, github, cfg['users'], cfg['labels'])
  migrator.migrate(opts[:start])
end
